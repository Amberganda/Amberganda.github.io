---
layout: post
title:      "Tips for Coding Better"
date:       2020-11-28 23:54:11 +0000
permalink:  tips_for_coding_better
---


A challenge that I had early on throughout this course was to do things faster and with more efficiency. I wish I had someone tell me these tips before I dove into the bootcamp program. Hopefully, if you're reading this, you can take note, and improve from WHEREVER you are in the program. Below are some of my tips to be a better coder. 

1. **Get familiar with the commands**. Using the keyboard shortcuts & searching for keywords instead of using my menu bar & clicking everywhere have really helped me cut down on time that usually ends up distracting myself. I'd highly recommend getting into good habits ASAP. I wish I would've started to learn this earlier. Here is a resource that I have handy while coding. I try to learn & implement a new command weekly. [Keyboard Shortcuts for Mac](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf) & [Keyboard Shortcuts for PC](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf)
2. **Github is your friend**. Another thing I really wish I learned how to use more efficiently in the beginning would be Github. As a non-developer, I found the whole forking, pushing & anything involving a command line a bit intimidating. When I was working on my projects, forgetting to commit, then breaking something and not commiting a working state caused me a lot of headaches. But when I a) committed early & often, b) left meaningful notes on my commit messages, and c) learned how to roll back my commits/features d) learned more tips with github, it made me a better programmer. Again, commiting and rolling back your commits on github is still intimidating, but learning how to do it & working on being better at it, has made me more confident when I code. It's reassuring to know that I can break something, and go back to a working state. [Here](https://code.likeagirl.io/how-to-undo-the-last-commit-393e7db2840b) is a good resource for learning how to roll back your commits, which I have found very useful. I also like [these tips](https://gist.github.com/fguillen/747678/3746204fbe5e99a6cd032f40e64b1e3d48768ef2), especially "git diff" which shows you where you've changed your code from your last commit. 
3. **Don't be intimidated by Command Prompts**. I swear, they get easier. Looking back on my first week to now, I have so many command prompts memorized. But I did so with post its. I've had to reference a post it to start my back end, my front end, my git pushes, and many more. But now, they're memorized. I never thought I would memorize them all. 
4. **Optimize your view space and work area**. I upgraded my computer configuration to my laptop & a monitor behind it. The more area I had to work with, gave me more room to have more screens up. Usually my configuration was on my laptop, I'd have my app pinned to the web browser, any informational tabs open to the rigth of it. That would take up the whole screen. On my monitor, I'd have my front-end & back-end terminals, and VSCode taking up most of that space. It took me probably the duration of the class to learn how to optimize my view space, but it has also improved my productivity. Doesn't hurt to try & minimize distractions as well. 
5. **Get better with Google search**. So, you're stuck on a problem. I've been there what feels like a million times. I would read through the documentation, read through the exercise, and still have something breaking or not working as I want it to. It's very frustrating and can be extremely time consuming. But one thing I learned was to use AS MUCH of my technical vocabulary & do a google search. Trust me, you're not having a unique problem. More than likely someone has the same exact error as you. Finding a solution and implementing it is 90% of the battle. You will not know all the answers. [StackOverflow.com](https://stackoverflow.com/) is a good resource to end up at. 
6. **Seek additional resources and tutorials**. We are very fortunate to live in a world that has an abundance of resources right at our fingertips. Through my local library, I found out about an online software course that I used as supplemental while also going through the FI cirriculum. When I had trouble grasping promises, fetch calls, syntax, for loops, whatever... there was always someone with a tutorial on Youtube. I'm a visual person, so reading documentation was hard for me to fully grasp. I appreciate the people out there making these videos. They've really been all around helpful. 
7. **Console.log("whatever")**. Do it often, know where you are, what you are working on, etc. 
8. **Make your variables meaningful**. When you're creating projects, be sure to name your objects meaningful nouns. For functions, make them meaningful verbs.
9. **Have fun**. I can't stress this enough. Work on something you're excited about. You're going to be working on your project and dissecting it a lot, so definitely choose something that you enjoy. 
10. **Try to stay positive**. You definitely need to get some fresh air and walk away from your code sometimes. When something was broken, and I spent hours trying to fix it, sometimes it was more helpful to step away from the problem and pick it up the next day. Maybe it was my attitude and perserverance that I was able to figure out how to fix the problem. 
